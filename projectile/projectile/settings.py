"""
Django settings for projectile project.

Generated by 'django-admin startproject' using Django 1.8.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

import datetime
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
# Parse database configuration from environment variable DATABASE_URL
import dj_database_url
from corsheaders.defaults import default_headers


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# The root of the git repo - Could be ~/project or ~/repo
REPO_DIR = os.path.realpath(os.path.join(BASE_DIR, '..'))
# The directory of the current user ie /home/django a.k.a. ~
HOME_DIR = os.path.realpath(os.path.join(REPO_DIR, '..'))
# The directory where collectstatic command copies/symlinks the files to
# This can/should be located at ~/staticfiles, preferrably outside the git repo
STATIC_DIR = os.path.realpath(os.path.join(HOME_DIR, 'staticfiles'))
# The directory where different applications uploads media files to
# This can/should be located at ~/media, preferrably outside the git repo
MEDIA_DIR = os.path.realpath(os.path.join(HOME_DIR, 'media'))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = STATIC_DIR
STATIC_URL = '/static/'
# For fixing additional slash in s3
_STATIC_URL = STATIC_URL
FULL_STATIC_URL = STATIC_URL

MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = '/media/'
# For fixing additional slash in s3
_MEDIA_URL = MEDIA_URL
FULL_MEDIA_URL = MEDIA_URL

# COMPRESSOR
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = False
COMPRESS_ROOT = STATIC_ROOT

STATICFILES_DIRS = [
    os.path.join(REPO_DIR, "projectile/templates/html"),
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'L)Aw$Kq2b49=cMJqQFRkUoXP&+V5_z^Xy_WNHRgFXcM3KWPE1m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
TEST_MODE = 'test' in sys.argv
# Enable API Doc
ENABLE_API_DOC = os.environ.get("ENABLE_API_DOC", DEBUG)
ENABLE_API_DOC = str(ENABLE_API_DOC).upper() == "TRUE"

# Enable or Disable Debug_toolbar and Silk
ENABLE_TOOLBAR = False
ENABLE_SILK = os.environ.get("ENABLE_SILK", False)
ENABLE_SILK = str(ENABLE_SILK).upper() == "TRUE"

if TEST_MODE:
    ENABLE_TOOLBAR = False
    ENABLE_SILK = False


REDIS_SERVER_IP = os.environ.get('REDIS_SERVER_IP', 'localhost')

ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")

INTERNAL_IPS = os.environ["INTERNAL_IPS"].split(",")

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]


THIRD_PARTY_APPS = [
    'reversion',
    'rest_framework',
    'drf_spectacular',
    'rest_framework.authtoken',
    'sorl.thumbnail',
    'redis',
    'django_user_agents',
    'django_extensions',
    'django_filters',
    'storages',
    # 'collectfast',
    'compressor',
    'corsheaders',
    'django_elasticsearch_dsl',
    'rest_framework_simplejwt.token_blacklist',
    'versatileimagefield',
    'simple_history',
    'django_celery_results',
]

WKTHMLTOPDF_PATH = "/usr/bin/wkhtmltopdf"

# turn the heartbeat off for testing and elasticsearch index rebuild
# heartbeat doesn't support django 5
# if ('test' not in sys.argv) and ('search_index' not in sys.argv):
#     THIRD_PARTY_APPS += ['heartbeat',]

if DEBUG and ENABLE_TOOLBAR:
    THIRD_PARTY_APPS += [
        'debug_toolbar',
    ]

if DEBUG and ENABLE_SILK:
    THIRD_PARTY_APPS += [
        'silk',
    ]

if TEST_MODE:
    THIRD_PARTY_APPS += [
        'test_without_migrations',
    ]

PROJECT_APPS = [
    # This project
    'common',
    'core',
    'account',
    'pharmacy',
    'prescription',
    'clinic',
    'promotion',
    'search',
    'expo_notification',
    'delivery',
    'ecommerce',
    'procurement',
    'stats',
    'notebookapi',
    'reporter_proxy',
    'deep_link',
    'order',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'reversion.middleware.RevisionMiddleware',
    # 'core.middleware.LogSQLMiddleware',
    'core.middleware.RequestInformationMiddleware',
    'common.middleware.CustomElasticController',
    'common.middleware.SerialCacheExpire',
    'django_user_agents.middleware.UserAgentMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
)

CORS_ORIGIN_WHITELIST = (
    'http://localhost:8000',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://127.0.0.1:8000',
    'http://localhost:8686',
    'https://app.healthosbd.com',
    'https://ecom.healthosbd.com',
    'https://ecommerce-expo.vercel.app',
    'https://procurement-nextjs.vercel.app',
    'https://procurement.healthosbd.com',
    'https://lighthouse-nextjs.vercel.app',
    'https://lh.healthosbd.com',
    'https://prcr.healthosbd.com',
    'https://prcrnxt.healthosbd.com',
    'https://ecommerce-expo.onrender.com',
)
CORS_ALLOW_HEADERS = list(default_headers) + [
    "geodata",
    "x-app-version",
    "x-system-platform",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOW_PRIVATE_NETWORK = DEBUG

if DEBUG and ENABLE_TOOLBAR:
    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

if DEBUG and ENABLE_SILK:
    MIDDLEWARE += (
        'silk.middleware.SilkyMiddleware',
    )

ROOT_URLCONF = 'projectile.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 'loaders': [
            #     ('django.template.loaders.cached.Loader', [
            #         'django.template.loaders.filesystem.Loader',
            #         'django.template.loaders.app_directories.Loader',
            #     ]),
            # ],
        },
    },
]

WSGI_APPLICATION = 'projectile.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(env='DATABASE_URL', conn_max_age=600),
}

if TEST_MODE:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:'
    }


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# File upload permission
FILE_UPLOAD_PERMISSIONS = 0o644

# USER MODEL SETTINGS
AUTH_USER_MODEL = 'core.Person'

# Do not auto append slashes in urls
APPEND_SLASH = False

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST FRAMEWORK
REST_FRAMEWORK = {
    # Use hyperlinked styles by default.
    # Only used if the `serializer_class` attribute is not set on a view.
    'DEFAULT_MODEL_SERIALIZER_CLASS': 'rest_framework.serializers.HyperlinkedModelSerializer',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'core.authentication.CustomJWTAuthentication'
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.JSONRenderer',
    ),
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/min',
        'user': '600/min'
    },
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.CustomPagination',
    'PAGE_SIZE': 20,
    'PAGINATE_BY_PARAM': 'page_size'
}

if TEST_MODE:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        'rest_framework.renderers.JSONRenderer',
    )

# JWT SETTINGS
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=90),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=180),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(days=90),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=180),
    'REVOKE_TOKEN_CLAIM': 'hashed_up',
    'CHECK_REVOKE_TOKEN': True
}

AUTHENTICATION_BACKENDS = ('core.backends.OmisAuthenticator',)


# LOGGING SETTINGS
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'account': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'core': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'pharmacy': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'common': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'search': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    }
}


# REDIS SESSIONS
REDIS_URL = os.environ['REDIS_URL']

SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS_PREFIX = 'session'
SESSION_REDIS = {
    'url': REDIS_URL
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "TIMEOUT": 172800,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            'DB': 1,
        }
    }
}
if TEST_MODE:
    CACHES["default"]["KEY_PREFIX"] = os.environ.get("USER", "test")


# EMAIL SETTINGS
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# CELERY SETTINGS
CELERY_BROKER_URL = REDIS_URL
# CELERY_RESULT_BACKEND = REDIS_URL  # Use for production
CELERY_RESULT_BACKEND = 'django-db'  # Use for debugging
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_RESULT_EXTENDED = True
# THIS IS FOR CRONJOBS USING CELERY
# CELERYBEAT_SCHEDULE = {
#     'test': {
#         'task': 'projectile.celery.test',
#         'schedule': datetime.timedelta(seconds=30*60),
#         'args': ('Test', 'Test',)
#     },
# }


# Set site related settings below...
SITE_ID = 1


# SORL THUMBNAIL SETTINGS
THUMBNAIL_KVSTORE = 'sorl.thumbnail.kvstores.redis_kvstore.KVStore'
THUMBNAIL_PRESERVE_FORMAT = True
THUMBNAIL_REDIS_URL = REDIS_URL

# silky profiler config
SILKY_AUTHENTICATION = ENABLE_SILK  # User must login
SILKY_AUTHORISATION = ENABLE_SILK  # User must have permissions

SILKY_META = ENABLE_SILK

SILKY_MAX_REQUEST_BODY_SIZE = -1  # Silk takes anything <0 as no limit
SILKY_MAX_RESPONSE_BODY_SIZE = 1024  # If response body>1024kb, ignore

SILKY_PYTHON_PROFILER = ENABLE_SILK
SILKY_PYTHON_PROFILER_BINARY = ENABLE_SILK
SILKY_PYTHON_PROFILER_RESULT_PATH = MEDIA_DIR


# INFOBIP SMS GATEWAY SETTINGS
INFOBIP_API_KEY = os.environ.get('INFOBIP_API_KEY', '')

# CRONJOBS ARE WRITTEN HERE (NOT CELERY BEAT)
CRONJOBS = [
    (
        # recurring time
        '*/30 * * * *',
        'clinic.cron.send_sms_to_treatment_sessions',                   # cron job command
        '>> {}/scheduled_jobs.log'.format(os.path.dirname(__file__))    # logs
    )
]

# DJANGO HEARTBEAT CONFIGURATION
HEARTBEAT = {
    'package_name': 'omis',
    'checkers': [
        'heartbeat.checkers.distribution_list',
        'heartbeat.checkers.debug_mode',
        'heartbeat.checkers.databases',
        'heartbeat.checkers.host',
        'heartbeat.checkers.python',
        # custom checkers start here
        'projectile.elasticsearch_checker',
        'projectile.celery_checker',
        'projectile.redis_checker',
    ],
    'auth': {
        'username': 'omis',
        'password': 'supersecret',
    },
}

TEST_PHONE_NUMBERS = [
    '+8801712915981'
]

TEST_SMS_ORGANIZATION_ID = 2

VERSATILEIMAGEFIELD_SETTINGS = {
    # The amount of time, in seconds, that references to created images
    # should be stored in the cache. Defaults to `2592000` (30 days)
    'cache_length': 2592000,
    # The name of the cache you'd like `django-versatileimagefield` to use.
    # Defaults to 'versatileimagefield_cache'. If no cache exists with the name
    # provided, the 'default' cache will be used instead.
    'cache_name': 'versatileimagefield_cache',
    # The save quality of modified JPEG images. More info here:
    # https://pillow.readthedocs.io/en/latest/handbook/image-file-formats.html#jpeg
    # Defaults to 70
    'jpeg_resize_quality': 80,
    # The name of the top-level folder within storage classes to save all
    # sized images. Defaults to '__sized__'
    'sized_directory_name': '__sized__',
    # The name of the directory to save all filtered images within.
    # Defaults to '__filtered__':
    'filtered_directory_name': '__filtered__',
    # The name of the directory to save placeholder images within.
    # Defaults to '__placeholder__':
    'placeholder_directory_name': '__placeholder__',
    # Whether or not to create new images on-the-fly. Set this to `False` for
    # speedy performance but don't forget to 'pre-warm' to ensure they're
    # created and available at the appropriate URL.
    'create_images_on_demand': False,
    # A dot-notated python path string to a function that processes sized
    # image keys. Typically used to md5-ify the 'image key' portion of the
    # filename, giving each a uniform length.
    # `django-versatileimagefield` ships with two post processors:
    # 1. 'versatileimagefield.processors.md5' Returns a full length (32 char)
    #    md5 hash of `image_key`.
    # 2. 'versatileimagefield.processors.md5_16' Returns the first 16 chars
    #    of the 32 character md5 hash of `image_key`.
    # By default, image_keys are unprocessed. To write your own processor,
    # just define a function (that can be imported from your project's
    # python path) that takes a single argument, `image_key` and returns
    # a string.
    'image_key_post_processor': None,
    # Whether to create progressive JPEGs. Read more about progressive JPEGs
    # here: https://optimus.io/support/progressive-jpeg/
    'progressive_jpeg': False
}

VERSATILEIMAGEFIELD_RENDITION_KEY_SETS = {
    'product_images': [
        ('full_size', 'url'),
        ('small', 'thumbnail__400x400'),
        ('large', 'thumbnail__1000x1000'),
    ],
    'banner_images': [
        ('full_size', 'url'),
        ('small', 'thumbnail__500x1500'),
        ('large', 'thumbnail__800x2400'),
    ],
    'notification_images': [
        ('full_size', 'url'),
        ('small', 'thumbnail__512x256'),
        ('large', 'thumbnail__1440x720'),
        ('large_icon', 'thumbnail__256x256'),
    ],
    'logo_images': [
        ('full_size', 'url'),
        ('small', 'thumbnail__100x100'),
        ('medium', 'thumbnail__300x300'),
        ('large', 'thumbnail__1200x800'),
    ],
}

# custom function, path as string:
AUTOSLUG_SLUGIFY_FUNCTION = 'common.helpers.unicode_slugify'

# Elastic Search related settings
ES_INDEX = "{}_{}".format('omis', os.environ.get("USER", ""))

if DEBUG:
    ES_INDEX = "{}_{}".format('hos', DATABASES.get(
        'default', {}).get('NAME', os.environ.get("USER", "")))
if TEST_MODE:
    ES_INDEX = "{}_{}".format('test_omis', os.environ.get("USER", ""))

ES_INDEX_SETTINGS = {
    'number_of_shards': 1,
    'number_of_replicas': 0,
}

ELASTICSEARCH_DSL = {
    'default': {'hosts': os.environ.get('ES_SERVER_IP', 'localhost:9200'), "timeout": 30},
}

ES_PAGINATION_SIZE = 1000
ES_MAX_PAGINATION_SIZE = 10000
ES_CUSTOM_DOC_CHUNK_SIZE = 10000
ES_DEFAULT_DOC_CHUNK_SIZE = 1000
ELASTICSEARCH_DSL_PARALLEL = False
ELASTICSEARCH_DSL_PARALLEL_CACHE_PREFIX = "elastic_search_record"

# Set true to stop auto sync
# ELASTICSEARCH_DSL_AUTO_REFRESH = False
# ELASTICSEARCH_DSL_AUTOSYNC = False

# Spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "E-Commerce API",
    "DESCRIPTION": "A data collection bucket.",
    "VERSION": "1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SERVE_PUBLIC": False,
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
