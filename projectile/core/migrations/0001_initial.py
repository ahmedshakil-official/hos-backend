# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-14 07:24
from __future__ import unicode_literals

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion
import enumerify.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('alias', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', enumerify.fields.SelectIntegerField(choices=[(0, b'Active'), (1, b'Inactive'), (2, b'Draft')], db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(db_index=True, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('country', models.CharField(choices=[(b'af', b'Afghanistan\t '), (b'al', b'Albania'), (b'dz', b'Algeria'), (b'as', b'American Samoa'), (b'ad', b'Andorra'), (b'ao', b'Angola'), (b'ai', b'Anguilla'), (b'aq', b'Antarctica'), (b'ag', b'Antigua and Barbuda'), (b'ar', b'Argentina'), (b'am', b'Armenia'), (b'aw', b'Aruba'), (b'ac', b'Ascension Island'), (b'au', b'Australia'), (b'at', b'Austria'), (b'az', b'Azerbaijan'), (b'bs', b'Bahamas'), (b'bh', b'Bahrain'), (b'bd', b'Bangladesh'), (b'bb', b'Barbados'), (b'by', b'Belarus'), (b'be', b'Belgium'), (b'bz', b'Belize'), (b'bj', b'Benin'), (b'bm', b'Bermuda'), (b'bt', b'Bhutan'), (b'bo', b'Bolivia'), (b'ba', b'Bosnia and Herzegovina'), (b'bw', b'Botswana'), (b'bv', b'Bouvet Island'), (b'br', b'Brazil'), (b'io', b'British Indian Ocean Territory'), (b'vg', b'British Virgin Islands'), (b'bn', b'Brunei Darussalam'), (b'bg', b'Bulgaria'), (b'bf', b'Burkina Faso'), (b'bi', b'Burundi'), (b'kh', b'Cambodia (Khmer)'), (b'cm', b'Cameroon'), (b'ca', b'Canada'), (b'cv', b'Cape Verde'), (b'ky', b'Cayman Islands'), (b'cf', b'Central African Republic'), (b'td', b'Chad'), (b'cl', b'Chile'), (b'cx', b'Christmas Island'), (b'cc', b'Cocos (Keeling) Islands'), (b'co', b'Colombia'), (b'km', b'Comoros'), (b'ck', b'Cook Islands'), (b'cr', b'Costa Rica'), (b'hr', b'Croatia (Hrvatska)'), (b'cu', b'Cuba'), (b'cy', b'Cyprus'), (b'cz', b'Czech Republic'), (b'ci', b"C\xc3\xb4te d'Ivoire"), (b'cd', b'Democratic Republic of the Congo (Formerly Zaire)'), (b'dk', b'Denmark'), (b'dj', b'Djibouti'), (b'dm', b'Dominica'), (b'do', b'Dominican Republic'), (b'tp', b'East Timor'), (b'ec', b'Ecuador'), (b'eg', b'Egypt'), (b'sv', b'El Salvador'), (b'gq', b'Equatorial Guinea'), (b'er', b'Eritrea'), (b'ee', b'Estonia'), (b'et', b'Ethiopia'), (b'eu', b'European Union'), (b'fk', b'Falkland Islands'), (b'fo', b'Faroe Islands'), (b'fm', b'Federated States of Micronesia'), (b'fj', b'Fiji'), (b'fi', b'Finland'), (b'fr', b'France'), (b'gf', b'French Guiana'), (b'pF', b'French Polynesia With Clipperton Island'), (b'tf', b'French Southern and Antarctic Lands'), (b'ga', b'Gabon'), (b'ge', b'Georgia'), (b'de', b'Germany (Deutschland)'), (b'gh', b'Ghana'), (b'gi', b'Gibraltar'), (b'gr', b'Greece'), (b'gl', b'Greenland'), (b'gd', b'Grenada'), (b'gp', b'Guadeloupe'), (b'gu', b'Guam'), (b'gt', b'Guatemala'), (b'gg', b'Guernsey'), (b'gn', b'Guinea'), (b'gw', b'Guinea-Bissau'), (b'gy', b'Guyana'), (b'ht', b'Haiti'), (b'hm', b'Heard Island and McDonald Islands'), (b'hn', b'Honduras'), (b'hk', b'Hong Kong'), (b'hu', b'Hungary'), (b'is', b'Iceland'), (b'in', b'India'), (b'id', b'Indonesia'), (b'ir', b'Iran'), (b'iq', b'Iraq'), (b'ie', b'Ireland'), (b'im', b'Isle of Man'), (b'il', b'Israel'), (b'it', b'Italy'), (b'jm', b'Jamaica'), (b'jp', b'Japan'), (b'je', b'Jersey'), (b'jo', b'Jordan'), (b'kz', b'Kazakhstan'), (b'ke', b'Kenya'), (b'ki', b'Kiribati'), (b'kw', b'Kuwait'), (b'kg', b'Kyrgyzstan'), (b'la', b'Laos'), (b'lv', b'Latvia'), (b'lb', b'Lebanon'), (b'ls', b'Lesotho'), (b'lr', b'Liberia'), (b'ly', b'Libya'), (b'li', b'Liechtenstein'), (b'lt', b'Lithuania'), (b'lu', b'Luxembourg'), (b'mo', b'Macau'), (b'mg', b'Madagascar'), (b'mW', b'Malawi'), (b'my', b'Malaysia'), (b'mv', b'Maldives'), (b'ml', b'Mali'), (b'mt', b'Malta'), (b'mh', b'Marshall Islands'), (b'mq', b'Martinique'), (b'mr', b'Mauritania'), (b'mu', b'Mauritius'), (b'yt', b'Mayotte'), (b'mx', b'Mexico'), (b'md', b'Moldova'), (b'mc', b'Monaco'), (b'mn', b'Mongolia'), (b'me', b'Montenegro'), (b'ms', b'Montserrat'), (b'ma', b'Morocco'), (b'mz', b'Mozambique'), (b'mm', b'Myanmar'), (b'na', b'Namibia'), (b'nr', b'Nauru'), (b'np', b'Nepal'), (b'nl', b'Netherlands'), (b'an', b'Netherlands Antilles'), (b'nc', b'New Caledonia'), (b'nz', b'New Zealand'), (b'ni', b'Nicaragua'), (b'ne', b'Niger'), (b'ng', b'Nigeria'), (b'nu', b'Niue'), (b'nF', b'Norfolk Island'), (b'mp', b'Northern Mariana Islands'), (b'no', b'Norway'), (b'om', b'Oman'), (b'pk', b'Pakistan'), (b'pw', b'Palau'), (b'ps', b'Palestinian territories\tie, West Bank and Gaza Strip'), (b'pa', b'Panama'), (b'pg', b'Papua New Guinea'), (b'py', b'Paraguay'), (b'cn', b"People's Republic of China"), (b'pe', b'Peru'), (b'ph', b'Philippines'), (b'pn', b'Pitcairn Islands'), (b'pl', b'Poland'), (b'pt', b'Portugal'), (b'pr', b'Puerto Rico'), (b'qa', b'Qatar'), (b'mk', b'Republic of Macedonia'), (b'cg', b'Republic of the Congo'), (b'ro', b'Romania'), (b'ru', b'Russia'), (b'rw', b'Rwanda'), (b're', b'R\xc3\xa9union'), (b'sh', b'Saint Helena'), (b'kn', b'Saint Kitts and Nevis'), (b'lc', b'Saint Lucia'), (b'vc', b'Saint Vincent and the Grenadines'), (b'pm', b'Saint-Pierre and Miquelon'), (b'ws', b'Samoa (Formerly Western Samoa)'), (b'sm', b'San Marino'), (b'sa', b'Saudi Arabia'), (b'sn', b'Senegal'), (b'rs', b'Serbia'), (b'sc', b'Seychelles'), (b'sl', b'Sierra Leone'), (b'sg', b'Singapore'), (b'sk', b'Slovakia'), (b'si', b'Slovenia'), (b'sb', b'Solomon Islands'), (b'so', b'Somalia'), (b'za', b'South Africa'), (b'gs', b'South Georgia and the South Sandwich Islands'), (b'kr', b'South Korea'), (b'su', b'Soviet Union'), (b'es', b'Spain (Espa\xc3\xb1a)'), (b'lk', b'Sri Lanka'), (b'sd', b'Sudan'), (b'sr', b'Suriname'), (b'sj', b'Svalbard and Jan Mayen Islands'), (b'sz', b'Swaziland'), (b'se', b'Sweden'), (b'ch', b'Switzerland'), (b'sy', b'Syria'), (b'st', b'S\xc3\xa3o Tom\xc3\xa9 and Pr\xc3\xadncipe'), (b'tw', b'Taiwan'), (b'tj', b'Tajikistan'), (b'tz', b'Tanzania'), (b'th', b'Thailand'), (b'gm', b'The Gambia'), (b'tl', b'Timor-Leste'), (b'tg', b'Togo'), (b'tk', b'Tokelau'), (b'to', b'Tonga'), (b'tt', b'Trinidad and Tobago'), (b'tn', b'Tunisia'), (b'tr', b'Turkey'), (b'tm', b'Turkmenistan'), (b'tc', b'Turks and Caicos Islands'), (b'tv', b'Tuvalu'), (b'vi', b'US Virgin Islands'), (b'ug', b'Uganda'), (b'ua', b'Ukraine'), (b'ae', b'United Arab Emirates'), (b'gb', b'United Kingdom'), (b'uk', b'United Kingdom'), (b'um', b'United States Minor Outlying Islands'), (b'us', b'United States of America'), (b'uy', b'Uruguay'), (b'uz', b'Uzbekistan'), (b'vu', b'Vanuatu'), (b'va', b'Vatican City State'), (b've', b'Venezuela'), (b'vn', b'Vietnam'), (b'wf', b'Wallis and Futuna'), (b'ye', b'Yemen'), (b'yu', b'Yugoslavia'), (b'zm', b'Zambia'), (b'zw', b'Zimbabwe')], db_index=True, default=b'bd', max_length=2)),
                ('language', models.CharField(default=b'en', max_length=2)),
                ('economic_status', enumerify.fields.SelectIntegerField(choices=[(0, b'Extreme Poor'), (1, b'Poor'), (2, b'Middle Class'), (3, b'Rich')], db_index=True, default=1)),
                ('nid', models.CharField(blank=True, default=None, help_text='National ID No. Example: YYYYXXXXXXXXXXXXX', max_length=32, null=True, verbose_name='NID No.')),
                ('birth_id', models.CharField(blank=True, help_text='Birth ID No. Example: YYYYXXXXXXXXXXXXX', max_length=32, null=True)),
                ('permanent_address', models.CharField(blank=True, max_length=255, null=True)),
                ('present_address', models.CharField(blank=True, max_length=255, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('person_group', enumerify.fields.SelectIntegerField(choices=[(0, b'Patient'), (1, b'Employee'), (2, b'Stack Holder'), (3, b'Supplier'), (4, b'Board of Director'), (5, b'System Admin'), (6, b'Other')], db_index=True, default=0)),
                ('balance', models.FloatField(default=0)),
                ('opening_balance', models.FloatField(default=0)),
                ('code', models.CharField(blank=True, max_length=16, null=True)),
                ('gender', enumerify.fields.SelectIntegerField(choices=[(0, b'Male'), (1, b'Female'), (2, b'Transsexual')], db_index=True, default=0)),
                ('mothers_name', models.CharField(blank=True, max_length=64, null=True)),
                ('fathers_name', models.CharField(blank=True, max_length=64, null=True)),
                ('husbands_name', models.CharField(blank=True, max_length=64, null=True)),
                ('relatives_name', models.CharField(blank=True, max_length=64, null=True)),
                ('relatives_address', models.CharField(blank=True, max_length=255, null=True)),
                ('relatives_contact_number', models.CharField(blank=True, max_length=16, null=True)),
                ('relatives_relation', enumerify.fields.SelectIntegerField(choices=[(0, b'Father'), (1, b'Mother'), (2, b'Brother'), (3, b'Sister'), (4, b'Brother in Law'), (5, b'Sister in Law'), (6, b'Father in Law'), (7, b'Friends'), (8, b'Helping Hand'), (99, b'Other')], db_index=True, default=0)),
                ('patient_refered_by', models.CharField(blank=True, max_length=255, null=True)),
                ('joining_date', models.DateField(blank=True, null=True)),
                ('remarks', models.CharField(blank=True, max_length=255, null=True)),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('contact_person_number', models.CharField(blank=True, max_length=100)),
                ('contact_person_address', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'persons',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', enumerify.fields.SelectIntegerField(choices=[(0, b'Active'), (1, b'Inactive'), (2, b'Draft')], db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name', unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_global', enumerify.fields.SelectIntegerField(choices=[(0, b'Private'), (1, b'Global'), (2, b'Changed into Global')], db_index=True, default=1)),
                ('clone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Department')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EmployeeDesignation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', enumerify.fields.SelectIntegerField(choices=[(0, b'Active'), (1, b'Inactive'), (2, b'Draft')], db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name', unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_global', enumerify.fields.SelectIntegerField(choices=[(0, b'Private'), (1, b'Global'), (2, b'Changed into Global')], db_index=True, default=1)),
                ('clone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.EmployeeDesignation')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Department')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', enumerify.fields.SelectIntegerField(choices=[(0, b'Active'), (1, b'Inactive'), (2, b'Draft')], db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name', unique=True)),
                ('description', models.TextField(blank=True)),
                ('slogan', models.CharField(max_length=64)),
                ('address', models.CharField(max_length=255)),
                ('primary_mobile', models.CharField(max_length=20)),
                ('other_contact', models.CharField(blank=True, max_length=64, null=True)),
                ('contact_person', models.CharField(max_length=64)),
                ('contact_person_designation', models.CharField(max_length=64)),
                ('email', models.CharField(blank=True, max_length=64, null=True)),
                ('website', models.CharField(blank=True, max_length=64, null=True)),
                ('domain', models.CharField(blank=True, max_length=128, null=True)),
                ('type', enumerify.fields.SelectIntegerField(choices=[(0, b'Mother'), (1, b'Branch'), (2, b'Unite')], db_index=True, default=0)),
                ('mother', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Organization')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PersonGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', enumerify.fields.SelectIntegerField(choices=[(0, b'Active'), (1, b'Inactive'), (2, b'Draft')], db_index=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person_group', models.CharField(max_length=64)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='employeedesignation',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization'),
        ),
        migrations.AddField(
            model_name='department',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization'),
        ),
        migrations.AddField(
            model_name='person',
            name='designation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.EmployeeDesignation'),
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
